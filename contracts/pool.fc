#include "imports/utils.fc";

() save_data(builder elector, slice root, slice validator, int round_since) impure {
    begin_cell()
        .store_builder(elector)
        .store_slice(root)
        .store_slice(validator)
        .store_uint(round_since, 32)
        .end_cell()
        .set_data();
}

(slice, slice, slice, int) load_data() impure {
    slice ds = get_data().begin_parse();
    slice elector = ds~load_msg_addr();
    slice root = ds~load_msg_addr();
    slice validator = ds~load_msg_addr();
    int round_since = ds~load_uint(32);
    ds.end_parse();
    return ( elector, root, validator, round_since );
}

() send_new_stake(slice src, slice s) impure {
    ( _, slice root, slice validator, int round_since ) = load_data();

    int query_id = s~load_uint(64); ;; must be non-zero to receive success response
    cell new_stake_msg = s~load_ref();
    s.end_parse();

    throw_unless(err::access_denied, equal_slices(src, root));

    ( int pool_storage, _ ) = loan_storage_fee();
    raw_reserve(pool_storage, reserve::at_most);

    builder elector = create_address(get_elector());
    builder body = begin_cell()
        .store_uint(op::new_stake, 32)
        .store_uint(query_id, 64)
        .store_slice(new_stake_msg.begin_parse());
    send_msg(true, elector, null(), body, 0, send::remaining_balance);

    save_data(elector, root, validator, round_since);
}

() new_stake_error(slice src, slice s) impure {
    ( slice elector, slice root, slice validator, int round_since ) = load_data();

    int query_id = 0;
    int reason = 0;
    if (s.slice_bits() >= 64 + 32) { ;; in case the elector's behavior changed, don't throw
        query_id = s~load_uint(64);
        reason = s~load_uint(32);
    }

    throw_unless(err::access_denied, equal_slices(src, elector));

    accept_message();

    builder body = begin_cell()
        .store_uint(op::new_stake_rejected, 32)
        .store_uint(query_id, 64)
        .store_uint(reason, 32)
        .store_slice(validator)
        .store_uint(round_since, 32);
    send_msg(false, root.to_builder(), null(), body, 0, send::remaining_balance);
}

() send_recover_stake(slice src, slice s) impure {
    ( slice elector, slice root, slice validator, int round_since ) = load_data();

    int query_id = s~load_uint(64);
    s.end_parse();

    throw_unless(err::access_denied, equal_slices(src, root));

    builder body = begin_cell()
        .store_uint(op::recover_stake, 32)
        .store_uint(query_id, 64);
    send_msg(true, elector.to_builder(), null(), body, 0, send::remaining_value);
}

() recover_stake_result(slice src, int op, slice s) impure {
    ( slice elector, slice root, slice validator, int round_since ) = load_data();

    int query_id = 0;
    if (s.slice_bits() >= 64) { ;; in case the elector's behavior changed, don't throw
        query_id = s~load_uint(64);
    }

    int ok? = op == op::recover_stake_ok;

    throw_unless(err::access_denied, equal_slices(src, elector));

    accept_message();

    builder body = begin_cell()
        .store_uint(op::recover_stake_result, 32)
        .store_uint(query_id, 64)
        .store_uint(ok?, 1)
        .store_slice(validator)
        .store_uint(round_since, 32);
    send_msg(false, root.to_builder(), null(), body, 0, send::remaining_balance);
}

int src_is_elector?(slice src) {
    ( slice elector, slice root, slice validator, int round_since ) = load_data();
    builder current_elector = create_address(get_elector());

    return equal_slices(src, elector) | equal_slices(src, current_elector.end_cell().begin_parse());
}

() on_bounce(slice src, slice s) impure {
    int op = s~load_uint(32);

    if (op == op::new_stake) {
        ;; the elector does not throw because format of new_stake_msg is already checked,
        ;; however, its code might change in the future, so let's handle a potential throw
        new_stake_error(src, s);
        return ();
    }

    if (op == op::recover_stake) {
        ;; the elector does not throw, but we'll handle it in case the elector's code has changed
        recover_stake_result(src, op::recover_stake_error, s);
        return ();
    }
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice src = cs~load_msg_addr();

    if (flags & 1) {
        on_bounce(src, in_msg_body);
        return ();
    }

    int op = 0;
    if (in_msg_body.slice_bits()) {
        op = in_msg_body~load_uint(32);
    }

    if (op == op::send_new_stake) {
        send_new_stake(src, in_msg_body);
        return ();
    }

    if (op == op::new_stake_error) {
        new_stake_error(src, in_msg_body);
        return ();
    }

    if (op == op::new_stake_ok) {
        ;; elector returns 1 TON when query_id > 0, do nothing
        return ();
    }

    if (op == op::send_recover_stake) {
        send_recover_stake(src, in_msg_body);
        return ();
    }

    if (op == op::recover_stake_error) { ;; nothing to recover
        recover_stake_result(src, op, in_msg_body);
        return ();
    }

    if (op == op::recover_stake_ok) { ;; recover returns some TON
        recover_stake_result(src, op, in_msg_body);
        return ();
    }

    if (op == op::top_up) {
        ;; top up TON balance, do nothing
        return ();
    }

    if (src_is_elector?(src)) {
        ;; accept coins from the elector
        return ();
    }

    throw(err::unknown_op);
}

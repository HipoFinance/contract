#include "imports/utils.fc";

global slice elector;
global slice treasury;
global slice borrower;
global int round_since;

() save_data(builder current_elector) impure inline {
    begin_cell()
        .store_builder(current_elector)
        .store_slice(treasury)
        .store_slice(borrower)
        .store_uint(round_since, 32)
        .end_cell()
        .set_data();
}

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    elector = ds~load_msg_addr();
    treasury = ds~load_msg_addr();
    borrower = ds~load_msg_addr();
    round_since = ds~load_uint(32);
    ds.end_parse();
}

() proxy_new_stake(slice src, slice s) impure inline {
    int query_id = s~load_uint(64); ;; must be non-zero to receive success response
    cell new_stake_msg = s~load_ref();
    s.end_parse();

    throw_unless(err::access_denied, equal_slice_bits(src, treasury));

    builder current_elector = create_address(get_elector());

    builder stake = begin_cell()
        .store_uint(op::new_stake, 32)
        .store_uint(query_id, 64)
        .store_slice(new_stake_msg.begin_parse());
    send_msg(true, current_elector, null(), stake, 0, send::unreserved_balance);

    save_data(current_elector);
}

() proxy_recover_stake(slice src, slice s) impure inline {
    int query_id = s~load_uint(64);
    s.end_parse();

    throw_unless(err::access_denied, equal_slice_bits(src, treasury));

    builder recover = begin_cell()
        .store_uint(op::recover_stake, 32)
        .store_uint(query_id, 64);
    send_msg(true, elector.to_builder(), null(), recover, 0, send::unreserved_balance);
}

() recover_stake_handler(slice src, int op, slice s) impure inline_ref {
    int query_id = 0;
    if s.slice_bits() >= 64 { ;; in case the elector's behavior changed, don't throw
        query_id = s~load_uint(64);
    }

    int ok? = op == op::recover_stake_ok;

    throw_unless(err::access_denied, equal_slice_bits(src, elector));

    accept_message();

    builder result = begin_cell()
        .store_uint(op::recover_stake_result, 32)
        .store_uint(query_id, 64)
        .store_int(ok?, 1)
        .store_slice(borrower)
        .store_uint(round_since, 32);
    send_msg(false, treasury.to_builder(), null(), result, 0, send::unreserved_balance);
}

int src_is_elector?(slice src) inline {
    builder current_elector = create_address(get_elector());

    return equal_slice_bits(src, elector) | equal_slice_bits(src, current_elector.end_cell().begin_parse());
}

() on_bounce(slice src, slice s) impure inline {
    s~load_uint(32); ;; skip bounced op
    int op = s~load_uint(32);

    if op == op::new_stake {
        ;; the elector does not throw because format of new_stake_msg is already checked,
        ;; however, its code might change in the future, so let's handle a potential throw
        return recover_stake_handler(src, op::new_stake_error, s);
    }

    if op == op::recover_stake {
        ;; the elector does not throw, but we'll handle it in case the elector's code has changed
        return recover_stake_handler(src, op::recover_stake_error, s);
    }
}

() route_internal_message(int flags, slice src, slice s) impure inline {
    if flags & 1 {
        return on_bounce(src, s);
    }

    int op = 0;
    if s.slice_bits() {
        op = s~load_uint(32);
    }

    if op == op::proxy_new_stake {
        return proxy_new_stake(src, s);
    }

    if op == op::new_stake_error {
        return recover_stake_handler(src, op, s);
    }

    if op == op::new_stake_ok {
        return (); ;; elector returns 1 TON when query_id > 0, do nothing
    }

    if op == op::proxy_recover_stake {
        return proxy_recover_stake(src, s);
    }

    if op == op::recover_stake_error {
        return recover_stake_handler(src, op, s);
    }

    if op == op::recover_stake_ok {
        return recover_stake_handler(src, op, s);
    }

    if op == op::top_up {
        return (); ;; top up TON balance, do nothing
    }

    if src_is_elector?(src) {
        return (); ;; accept coins from the elector
    }

    throw(err::invalid_op);
}

() recv_internal(cell in_msg_full, slice s) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice src = cs~load_msg_addr();

    load_data();
    route_internal_message(flags, src, s);
}

var get_loan_state() method_id {
    load_data();

    return ( elector, treasury, borrower, round_since );
}

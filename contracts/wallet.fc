#include "imports/utils.fc";

() save_data
    ( slice owner
    , slice treasury
    , int tokens
    , cell staking
    , int unstaking
    , cell wallet_code
    ) impure {
    begin_cell()
        .store_slice(owner)
        .store_slice(treasury)
        .store_coins(tokens)
        .store_dict(staking)
        .store_coins(unstaking)
        .store_ref(wallet_code)
        .end_cell()
        .set_data();
}

(slice, slice, int, cell, int, cell) load_data() impure {
    slice ds = get_data().begin_parse();
    slice owner = ds~load_msg_addr();
    slice treasury = ds~load_msg_addr();
    int tokens = ds~load_coins();
    cell staking = ds~load_dict();
    int unstaking = ds~load_coins();
    cell wallet_code = ds~load_ref();
    ds.end_parse();
    return ( owner, treasury, tokens, staking, unstaking, wallet_code );
}

() save_coins(int msg_ton, slice src, slice s) impure {
    ( slice owner
    , slice treasury
    , int tokens
    , cell staking
    , int unstaking
    , cell wallet_code
    ) = load_data();

    int query_id = s~load_uint(64);
    int stake_amount = s~load_coins();
    int round_since = s~load_uint(32);
    slice driver = s~load_msg_addr();
    s.end_parse();

    throw_unless(err::access_denied, equal_slices(src, treasury));

    ( slice v, int f? ) = staking.udict_get?(32, round_since);
    if (f?) {
        stake_amount += v~load_coins();
        v.end_parse();
    }
    staking~udict_set_builder(32, round_since, begin_cell().store_coins(stake_amount));

    int ton_balance = get_balance().pair_first();
    int ton_balance_before_msg = ton_balance - msg_ton;
    int reserve_balance = max(ton_balance_before_msg, wallet_storage_fee());
    raw_reserve(reserve_balance, reserve::at_most);

    builder excess = begin_cell()
        .store_uint(op::gas_excess, 32)
        .store_uint(query_id, 64);
    send_msg(false, driver.to_builder(), null(), excess, 0, send::remaining_balance + send::ignore_errors);

    save_data(owner, treasury, tokens, staking, unstaking, wallet_code);
}

() stake_coins(int msg_ton, slice src, slice s) impure {
    ( slice owner
    , slice treasury
    , int tokens
    , cell staking
    , int unstaking
    , cell wallet_code
    ) = load_data();

    int query_id = s~load_uint(64);
    int round_since = s~load_uint(32);
    s.end_parse();

    int min_fee = stake_coins_fee();
    int stake_amount = 0;
    ( slice v, int f? ) = staking~udict_delete_get?(32, round_since);
    if (f?) {
        stake_amount = v~load_coins();
        v.end_parse();
    }

    throw_unless(err::insufficient_fee, msg_ton >= min_fee);
    throw_unless(err::insufficient_funds, stake_amount > 0);

    builder body = begin_cell()
        .store_uint(op::mint_tokens, 32)
        .store_uint(query_id, 64)
        .store_coins(stake_amount)
        .store_uint(round_since, 32)
        .store_slice(owner)
        .store_slice(src);
    send_msg(true, treasury.to_builder(), null(), body, 0, send::remaining_value);

    save_data(owner, treasury, tokens, staking, unstaking, wallet_code);
}

() receive_tokens(int msg_ton, slice src, slice s) impure {
    ( slice owner
    , slice treasury
    , int tokens
    , cell staking
    , int unstaking
    , cell wallet_code
    ) = load_data();

    int query_id = s~load_uint(64);
    int amount = s~load_coins();
    slice sender = s~load_msg_addr();
    slice return_excess = s~load_msg_addr();
    int forward_ton_amount = s~load_coins();
    slice forward_payload = s;

    int allowed? = equal_slices(src, treasury);
    ifnot (allowed?) {
        ( _, _, int wallet_addr ) = create_wallet_address(sender.to_builder(), treasury, wallet_code);
        ( int src_wc, int src_addr ) = parse_std_addr(src);
        allowed? = (src_wc == chain::base) & (src_addr == wallet_addr);
    }

    throw_unless(err::access_denied, allowed?);

    tokens += amount;

    int ton_balance = get_balance().pair_first();
    int ton_balance_before_msg = ton_balance - msg_ton;
    int reserve_balance = max(ton_balance_before_msg, wallet_storage_fee());
    raw_reserve(reserve_balance, reserve::at_most);

    if (forward_ton_amount) {
        builder body = begin_cell()
            .store_uint(op::transfer_notification, 32)
            .store_uint(query_id, 64)
            .store_coins(amount)
            .store_slice(sender)
            .store_slice(forward_payload);
        send_msg(false, owner.to_builder(), null(), body, forward_ton_amount, send::pay_gas_separately);
    }

    builder excess = begin_cell()
        .store_uint(op::gas_excess, 32)
        .store_uint(query_id, 64);
    send_msg(false, return_excess.to_builder(), null(), excess, 0, send::remaining_balance + send::ignore_errors);

    save_data(owner, treasury, tokens, staking, unstaking, wallet_code);
}

() send_tokens(int msg_ton, slice src, slice s) impure {
    ( slice owner
    , slice treasury
    , int tokens
    , cell staking
    , int unstaking
    , cell wallet_code
    ) = load_data();

    int query_id = s~load_uint(64);
    int amount = s~load_coins();
    slice recipient = s~load_msg_addr();
    slice return_excess = s~load_msg_addr();
    s~load_maybe_ref(); ;; skip custom_payload
    int forward_ton_amount = s~load_coins();
    slice forward_payload = s;
    s~skip_bits(1); ;; check either field

    if (return_excess.preload_uint(2) == 0) {
        return_excess = src;
    }

    ( int recipient_wc, _ ) = parse_std_addr(recipient);
    ( builder wallet, cell state_init, _ ) = create_wallet_address(recipient.to_builder(), treasury, wallet_code);
    int min_ton = forward_ton_amount + send_tokens_fee(state_init);

    throw_unless(err::access_denied, equal_slices(src, owner));
    throw_unless(err::only_basechain_allowed, recipient_wc == chain::base);
    throw_unless(err::receiver_is_sender, ~ equal_slices(recipient, owner));
    throw_unless(err::insufficient_fee, msg_ton >= min_ton);
    throw_unless(err::insufficient_funds, (amount > 0) & (amount <= tokens));

    tokens -= amount;

    builder body = begin_cell()
        .store_uint(op::receive_tokens, 32)
        .store_uint(query_id, 64)
        .store_coins(amount)
        .store_slice(owner)
        .store_slice(return_excess)
        .store_coins(forward_ton_amount)
        .store_slice(forward_payload);
    send_msg(true, wallet, state_init, body, 0, send::remaining_value);

    save_data(owner, treasury, tokens, staking, unstaking, wallet_code);
}

() unstake_tokens(int msg_ton, slice src, slice s) impure {
    ( slice owner
    , slice treasury
    , int tokens
    , cell staking
    , int unstaking
    , cell wallet_code
    ) = load_data();

    int query_id = s~load_uint(64);
    int amount = s~load_coins();
    slice return_excess = s~load_msg_addr();
    s~skip_dict(); ;; skip custom_payload
    s.end_parse();

    if (return_excess.preload_uint(2) == 0) {
        return_excess = src;
    }

    int min_ton = unstake_tokens_fee();

    throw_unless(err::access_denied, equal_slices(src, owner));
    throw_unless(err::insufficient_fee, msg_ton >= min_ton);
    throw_unless(err::insufficient_funds, (amount > 0) & (amount <= tokens));

    tokens -= amount;
    unstaking += amount;

    int ton_balance = get_balance().pair_first();
    int ton_balance_before_msg = ton_balance - msg_ton;
    int reserve_balance = max(ton_balance_before_msg, wallet_storage_fee());
    raw_reserve(reserve_balance, reserve::exact);

    builder body = begin_cell()
        .store_uint(op::reserve_tokens, 32)
        .store_uint(query_id, 64)
        .store_coins(amount)
        .store_slice(owner)
        .store_slice(return_excess);
    send_msg(true, treasury.to_builder(), null(), body, 0, send::remaining_balance);

    save_data(owner, treasury, tokens, staking, unstaking, wallet_code);
}

() withdraw_tokens(int msg_ton, slice src, slice s) impure {
    ( slice owner
    , slice treasury
    , int tokens
    , cell staking
    , int unstaking
    , cell wallet_code
    ) = load_data();

    int query_id = s~load_uint(64);
    s.end_parse();

    int min_ton = withdraw_tokens_fee();

    throw_unless(err::insufficient_fee, msg_ton >= min_ton);
    throw_unless(err::insufficient_funds, unstaking > 0);

    builder body = begin_cell()
        .store_uint(op::burn_tokens, 32)
        .store_uint(query_id, 64)
        .store_coins(unstaking)
        .store_slice(owner)
        .store_slice(src);
    send_msg(true, treasury.to_builder(), null(), body, 0, send::remaining_value);

    save_data(owner, treasury, tokens, staking, 0, wallet_code);
}

() burn_failed(int msg_ton, slice src, slice s) impure {
    ( slice owner
    , slice treasury
    , int tokens
    , cell staking
    , int unstaking
    , cell wallet_code
    ) = load_data();

    int query_id = s~load_uint(64);
    int tokens = s~load_coins();
    slice return_excess = s~load_msg_addr();
    s.end_parse();

    throw_unless(err::access_denied, equal_slices(src, treasury));

    unstaking += tokens;

    int ton_balance = get_balance().pair_first();
    int ton_balance_before_msg = ton_balance - msg_ton;
    int reserve_balance = max(ton_balance_before_msg, wallet_storage_fee());
    raw_reserve(reserve_balance, reserve::at_most);

    builder excess = begin_cell()
        .store_uint(op::withdraw_failed, 32)
        .store_uint(query_id, 64);
    send_msg(false, return_excess.to_builder(), null(), excess, 0, send::remaining_balance + send::ignore_errors);

    save_data(owner, treasury, tokens, staking, unstaking, wallet_code);
}

() on_bounce(slice s) impure {
    ;; this should not happen but in a rare case of a bounce (e.g. a frozen account), at least recover tokens

    ( slice owner
    , slice treasury
    , int tokens
    , cell staking
    , int unstaking
    , cell wallet_code
    ) = load_data();

    s~load_uint(32); ;; skip bounced op
    int op = s~load_uint(32);
    int query_id = s~load_uint(64);

    if (op == op::mint_tokens) {
        int stake_amount = s~load_coins();
        int round_since = 0;
        if (s.slice_bits() >= 32) {
            round_since = s~load_uint(32);
        }
        ( slice v, int f? ) = staking.udict_get?(32, round_since);
        if (f?) {
            stake_amount += v~load_coins();
            v.end_parse();
        }
        staking~udict_set_builder(32, round_since, begin_cell().store_coins(stake_amount));
    }

    if (op == op::receive_tokens) {
        int amount = s~load_coins();
        tokens += amount;
    }

    if (op == op::reserve_tokens) {
        int amount = s~load_coins();
        tokens += amount;
        unstaking -= amount;
    }

    if (op == op::burn_tokens) {
        int amount = s~load_coins();
        unstaking += amount;
    }

    ;; return excess gas to owner which is usually the original sender
    builder body = begin_cell()
        .store_uint(op::gas_excess, 32)
        .store_uint(query_id, 64);
    send_msg(false, owner.to_builder(), null(), body, 0, send::remaining_value + send::ignore_errors);

    save_data(owner, treasury, tokens, staking, unstaking, wallet_code);
}

() recv_internal(int msg_ton, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice src = cs~load_msg_addr();

    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }

    int op = 0;
    if (in_msg_body.slice_bits()) {
        op = in_msg_body~load_uint(32);
    }

    if (op == op::save_coins) {
        save_coins(msg_ton, src, in_msg_body);
        return ();
    }

    if (op == op::stake_coins) {
        stake_coins(msg_ton, src, in_msg_body);
        return ();
    }

    if (op == op::receive_tokens) {
        receive_tokens(msg_ton, src, in_msg_body);
        return ();
    }

    if (op == op::send_tokens) {
        send_tokens(msg_ton, src, in_msg_body);
        return ();
    }

    if (op == op::unstake_tokens) {
        unstake_tokens(msg_ton, src, in_msg_body);
        return ();
    }

    if (op == op::withdraw_tokens) {
        withdraw_tokens(msg_ton, src, in_msg_body);
        return ();
    }

    if (op == op::burn_failed) {
        burn_failed(msg_ton, src, in_msg_body);
    }

    if (op == op::top_up) {
        ;; top up TON balance, do nothing
        return ();
    }

    throw(err::unknown_op);
}

;;
;; get methods
;;

(int, cell, int) get_wallet_state() method_id {
    ( _
    , _
    , int tokens
    , cell staking
    , int unstaking
    , _
    ) = load_data();

    return ( tokens, staking, unstaking );
}

(int, slice, slice, cell) get_wallet_data() method_id {
    ( slice owner
    , slice treasury
    , int tokens
    , _
    , _
    , cell wallet_code
    ) = load_data();

    return ( tokens, owner, treasury, wallet_code );
}

#include "../../contracts/imports/utils.fc";

() upgrade_data(slice src, int query_id, slice s) impure method_id {
    ;; This just messes with data for test.
    begin_cell()
        .store_slice(s~load_msg_addr())
        .store_ref(get_data())
        .end_cell()
        .set_data();

    builder excess = begin_cell()
        .store_uint(op::gas_excess, 32)
        .store_uint(query_id, 64);
    send_msg(false, src.to_builder(), null(), excess, 0, send::remaining_value + send::ignore_errors);
}

() upgrade_code(slice src, slice s) impure {
    slice ds = get_data().begin_parse();
    slice governor = ds~load_msg_addr();

    int query_id = s~load_uint(64);
    cell new_code = s~load_ref();
    ;; no s.end_parse(), allow additional data in message body

    throw_unless(err::access_denied, equal_slice_bits(src, governor));

    set_code(new_code);
    set_c3(new_code.begin_parse().bless());
    upgrade_data(src, query_id, s);
    throw(0);
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice src = cs~load_msg_addr();

    if (flags & 1) {
        return ();
    }

    int op = 0;
    if (in_msg_body.slice_bits()) {
        op = in_msg_body~load_uint(32);
    }

    if (op == op::upgrade_code) {
        return upgrade_code(src, in_msg_body);
    }

    throw(err::invalid_op);
}

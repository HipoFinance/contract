#include "../../contracts/imports/utils.fc";

global int total_coins;
global int total_tokens;
global int total_staking;
global int total_unstaking;
global int total_validators_stake;
global slice parent;
global cell participations;
global int rounds_imbalance;
global int stopped?;
global int instant_mint?;
global cell loan_codes;
global cell extension;

global int last_staked;
global int last_recovered;
global slice halter;
global slice governor;
global cell proposed_governor;
global int governance_fee;
global cell collection_codes;
global cell bill_codes;
global cell old_parents;

() load_data() impure {
    slice ds = get_data().begin_parse();
    total_coins = ds~load_coins();
    total_tokens = ds~load_coins();
    total_staking = ds~load_coins();
    total_unstaking = ds~load_coins();
    total_validators_stake = ds~load_coins();
    parent = ds~load_msg_addr();
    participations = ds~load_dict();
    rounds_imbalance = ds~load_uint(8);
    stopped? = ds~load_int(1);
    instant_mint? = ds~load_int(1);
    loan_codes = ds~load_ref();
    extension = ds~load_ref();
    ds.end_parse();
}

() unpack_extension() impure {
    slice s = extension.begin_parse();
    last_staked = s~load_coins();
    last_recovered = s~load_coins();
    halter = s~load_msg_addr();
    governor = s~load_msg_addr();
    proposed_governor = s~load_maybe_ref();
    governance_fee = s~load_uint(16);
    collection_codes = s~load_ref();
    bill_codes = s~load_ref();
    old_parents = s~load_dict();
    s.end_parse();
}

() upgrade_data(slice src, int query_id, cell new_data, slice return_excess) impure method_id {
    ;; Add code for upgrading data here.

    ;; This just resets data back to its previous state.
    slice ds = get_data().begin_parse();
    ds~load_msg_addr();
    ds~load_ref().set_data();

    ;; Do not change the following code.
    governor = null();
    load_data();
    unpack_extension();

    throw_unless(err::access_denied, equal_slice_bits(src, governor));

    builder excess = begin_cell()
        .store_uint(op::gas_excess, 32)
        .store_uint(query_id, 64);
    send_msg(false, return_excess.to_builder(), null(), excess, 0, send::remaining_value + send::ignore_errors);

    throw(0);
}

() upgrade_code(slice src, slice s) impure {
    unpack_extension();

    int query_id = s~load_uint(64);
    cell new_code = s~load_ref();
    cell new_data = s~load_maybe_ref();
    slice return_excess = s~load_msg_addr();
    s.end_parse();

    if return_excess.addr_none?() {
        return_excess = src;
    }

    throw_unless(err::access_denied, equal_slice_bits(src, governor));

    set_code(new_code);
    set_c3(new_code.begin_parse().bless());
    upgrade_data(src, query_id, new_data, return_excess);
}

() route_internal_message(int flags, slice src, slice s) impure inline {
    if flags & 1 {
        return ();
    }

    int op = s~load_uint(32);

    if op == op::upgrade_code {
        return upgrade_code(src, s);
    }

    throw(err::invalid_op);
}

() recv_internal(cell in_msg_full, slice s) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice src = cs~load_msg_addr();

    load_data();
    route_internal_message(flags, src, s);
}

#include "../../contracts/imports/utils.fc";

global int total_coins;
global int total_tokens;
global int total_staking;
global int total_unstaking;
global int total_validators_stake;
global cell participations;
global int balanced_rounds?;
global int stopped?;
global cell wallet_code;
global cell loan_code;
global cell extension;

global slice driver;
global slice halter;
global slice governor;
global cell proposed_governor;
global int governance_fee;
global cell rewards_history;
global cell content;

() load_data() impure {
    slice ds = get_data().begin_parse();
    total_coins = ds~load_coins();
    total_tokens = ds~load_coins();
    total_staking = ds~load_coins();
    total_unstaking = ds~load_coins();
    total_validators_stake = ds~load_coins();
    participations = ds~load_dict();
    balanced_rounds? = ds~load_int(1);
    stopped? = ds~load_int(1);
    wallet_code = ds~load_ref();
    loan_code = ds~load_ref();
    extension = ds~load_ref();
}

() unpack_extension() impure {
    slice s = extension.begin_parse();
    driver = s~load_msg_addr();
    halter = s~load_msg_addr();
    governor = s~load_msg_addr();
    proposed_governor = s~load_maybe_ref();
    governance_fee = s~load_uint(16);
    rewards_history = s~load_dict();
    content = s~load_ref();
    s.end_parse();
}

() upgrade_data(slice src, int query_id, slice s) impure method_id {
    ;; This just resets data back to its previous state.
    slice ds = get_data().begin_parse();
    ds~load_msg_addr();
    ds~load_ref().set_data();

    builder excess = begin_cell()
        .store_uint(op::gas_excess, 32)
        .store_uint(query_id, 64);
    send_msg(false, src.to_builder(), null(), excess, 0, send::remaining_value + send::ignore_errors);
}

() upgrade_code(slice src, slice s) impure {
    unpack_extension();

    int query_id = s~load_uint(64);
    cell new_code = s~load_ref();
    ;; no s.end_parse(), allow additional data in message body

    throw_unless(err::access_denied, equal_slice_bits(src, governor));

    set_code(new_code);
    set_c3(new_code.begin_parse().bless());
    upgrade_data(src, query_id, s);
    throw(0);
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    load_data();

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice src = cs~load_msg_addr();

    if (flags & 1) {
        return ();
    }

    int op = 0;
    if (in_msg_body.slice_bits()) {
        op = in_msg_body~load_uint(32);
    }

    if (op == op::upgrade_code) {
        return upgrade_code(src, in_msg_body);
    }

    throw(err::invalid_op);
}

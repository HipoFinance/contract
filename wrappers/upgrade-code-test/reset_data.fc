#include "../../contracts/imports/utils.fc";

(slice, slice, slice, cell, int, cell, cell) unpack_extension(slice s) {
    slice driver = s~load_msg_addr();
    slice halter = s~load_msg_addr();
    slice governor = s~load_msg_addr();
    cell proposed_governor = s~load_maybe_ref();
    int reward_share = s~load_uint(16);
    cell rewards_history = s~load_dict();
    cell content = s~load_ref();
    s.end_parse();
    return
        ( driver
        , halter
        , governor
        , proposed_governor
        , reward_share
        , rewards_history
        , content
        );
}

(int, int, int, int, int, cell, int, cell, cell, cell) load_data() impure {
    slice ds = get_data().begin_parse();
    int total_coins = ds~load_coins();
    int total_tokens = ds~load_coins();
    int total_staking = ds~load_coins();
    int total_unstaking = ds~load_coins();
    int total_validators_stake = ds~load_coins();
    cell participations = ds~load_dict();
    int stopped? = ds~load_int(1);
    cell wallet_code = ds~load_ref();
    cell loan_code = ds~load_ref();
    cell extension = ds~load_ref();
    return
        ( total_coins
        , total_tokens
        , total_staking
        , total_unstaking
        , total_validators_stake
        , participations
        , stopped?
        , wallet_code
        , loan_code
        , extension
        );
}

() upgrade_data(slice src, int query_id, slice s) impure method_id {
    ;; This just resets data back to its previous state.
    slice ds = get_data().begin_parse();
    ds~load_msg_addr();
    ds~load_ref().set_data();

    builder excess = begin_cell()
        .store_uint(op::gas_excess, 32)
        .store_uint(query_id, 64);
    send_msg(false, src.to_builder(), null(), excess, 0, send::remaining_value + send::ignore_errors);
}

() upgrade_code(slice src, slice s) impure {
    ( int total_coins
    , int total_tokens
    , int total_staking
    , int total_unstaking
    , int total_validators_stake
    , cell participations
    , int stopped?
    , cell wallet_code
    , cell loan_code
    , cell extension
    ) = load_data();
    ( slice driver
    , slice halter
    , slice governor
    , cell proposed_governor
    , int reward_share
    , cell rewards_history
    , cell content
    ) = unpack_extension(extension.begin_parse());

    int query_id = s~load_uint(64);
    cell new_code = s~load_ref();
    ;; no s.end_parse(), allow additional data in message body

    throw_unless(err::access_denied, equal_slice_bits(src, governor));

    set_code(new_code);
    set_c3(new_code.begin_parse().bless());
    upgrade_data(src, query_id, s);
    throw(0);
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice src = cs~load_msg_addr();

    if (flags & 1) {
        return ();
    }

    int op = 0;
    if (in_msg_body.slice_bits()) {
        op = in_msg_body~load_uint(32);
    }

    if (op == op::upgrade_code) {
        return upgrade_code(src, in_msg_body);
    }

    throw(err::invalid_op);
}
